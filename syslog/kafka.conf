@module mod-java
@define allow-config-dups 1

template template_date_format_root {
    template("${YEAR}-${MONTH}-${DAY} ${HOUR}:${MIN}:${SEC} ${SOURCEIP} RO;${MSGHDR}${MSG}\n");
    template_escape(no);
};

template template_date_format_os {
    template("${YEAR}-${MONTH}-${DAY} ${HOUR}:${MIN}:${SEC} ${SOURCEIP} RO;${MSGHDR}${MSG}\n");
    template_escape(no);
};

template template_date_format_snmp {
    template("${YEAR}-${MONTH}-${DAY} ${HOUR}:${MIN}:${SEC} ${SOURCEIP} SNMP;${MSGHDR}${MSG}\n");
    template_escape(no);
};
# ROSE

source auth_log_s {
	file("/var/log/auth.log");
};

destination d_kafka_auth {
	python(
		class("syslogng_kafka.kafkadriver.KafkaDestination-2")
	            	on-error("fallback-to-string")
        	    	options(
                		hosts("192.168.0.10:9092")
                		topic("watcher_topic")
                )
		template("template_date_format_os")
    );
};

filter watcher_root_access {
	match("session opened for user root" value("MESSAGE"));
};


log {
	source(auth_log_s);
	destination(syslog_to_kafka);
	filter(watcher_root_access);
};



# SNLA

source snmp_log_s {
	file("/var/log/messages");
};
destination d_kafka_snmp {
	python(
		class("syslogng_kafka.kafkadriver.KafkaDestination-2")
	            	on-error("fallback-to-string")
        	    	options(
                		hosts("192.168.0.10:9092")
                		topic("watcher_topic")
                )
		template("template_date_format_snmp")		
    );
};
filter watcher_root_access {
	match("session opened for user root" value("MESSAGE"));
};
log {
	source(auth_log_s);
	destination(syslog_to_kafka);
	filter(watcher_root_access);
};


# OSCR

source create_file_s {
	file("/var/log/messages");
};

destination d_kafka_create_file {
	python(
		class("syslogng_kafka.kafkadriver.KafkaDestination")
	            	on-error("fallback-to-string")
        	    	options(
                		hosts("192.168.0.10:9092")
                		topic("watcher_topic")
                )
		template("template_date_format_os")	
    );
};

filter f_danger_file {
	match(".wnc" value("MESSAGE"));
};

log {
	source(create_file_s);
	destination(d_kafka_create_file);
	filter(f_danger_file);
};



# OSAC

source read_file_s {
	file("/var/log/watcher_read.log");
};

destination d_kafka_read_file {
	python(
		class("syslogng_kafka.kafkadriver.KafkaDestination")
	            	on-error("fallback-to-string")
        	    	options(
                		hosts("192.168.0.10:9092")
                		topic("watcher_topic")
                )
		template("template_date_format_os")	
	);
};


log {
	source(read_file_s);
	destination(d_kafka_read_file);
};



